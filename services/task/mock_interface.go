// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source interface.go -destination=mock_interface.go -package=task
//

// Package task is a generated GoMock package.
package task

import (
	models "awesomeProject/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gofr "gofr.dev/pkg/gofr"
)

// MockTaskStore is a mock of TaskStore interface.
type MockTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockTaskStoreMockRecorder
	isgomock struct{}
}

// MockTaskStoreMockRecorder is the mock recorder for MockTaskStore.
type MockTaskStoreMockRecorder struct {
	mock *MockTaskStore
}

// NewMockTaskStore creates a new mock instance.
func NewMockTaskStore(ctrl *gomock.Controller) *MockTaskStore {
	mock := &MockTaskStore{ctrl: ctrl}
	mock.recorder = &MockTaskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskStore) EXPECT() *MockTaskStoreMockRecorder {
	return m.recorder
}

// AddTask mocks base method.
func (m *MockTaskStore) AddTask(ctx *gofr.Context, task string, uid int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTask", ctx, task, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTask indicates an expected call of AddTask.
func (mr *MockTaskStoreMockRecorder) AddTask(ctx, task, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTask", reflect.TypeOf((*MockTaskStore)(nil).AddTask), ctx, task, uid)
}

// CheckIfExists mocks base method.
func (m *MockTaskStore) CheckIfExists(ctx *gofr.Context, i int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfExists", ctx, i)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckIfExists indicates an expected call of CheckIfExists.
func (mr *MockTaskStoreMockRecorder) CheckIfExists(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfExists", reflect.TypeOf((*MockTaskStore)(nil).CheckIfExists), ctx, i)
}

// DeleteTask mocks base method.
func (m *MockTaskStore) DeleteTask(ctx *gofr.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskStoreMockRecorder) DeleteTask(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTaskStore)(nil).DeleteTask), ctx, id)
}

// GetByID mocks base method.
func (m *MockTaskStore) GetByID(ctx *gofr.Context, id int) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTaskStoreMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTaskStore)(nil).GetByID), ctx, id)
}

// UpdateTask mocks base method.
func (m *MockTaskStore) UpdateTask(ctx *gofr.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTaskStoreMockRecorder) UpdateTask(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTaskStore)(nil).UpdateTask), ctx, id)
}

// ViewTask mocks base method.
func (m *MockTaskStore) ViewTask(ctx *gofr.Context) ([]models.Tasks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewTask", ctx)
	ret0, _ := ret[0].([]models.Tasks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewTask indicates an expected call of ViewTask.
func (mr *MockTaskStoreMockRecorder) ViewTask(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewTask", reflect.TypeOf((*MockTaskStore)(nil).ViewTask), ctx)
}

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CheckUserID mocks base method.
func (m *MockUserService) CheckUserID(ctx *gofr.Context, id int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserID", ctx, id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckUserID indicates an expected call of CheckUserID.
func (mr *MockUserServiceMockRecorder) CheckUserID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserID", reflect.TypeOf((*MockUserService)(nil).CheckUserID), ctx, id)
}
