// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source interface.go -destination=mock_interface.go -package=user
//

// Package user is a generated GoMock package.
package user

import (
	models "awesomeProject/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gofr "gofr.dev/pkg/gofr"
)

// MockUserStore is a mock of UserStore interface.
type MockUserStore struct {
	ctrl     *gomock.Controller
	recorder *MockUserStoreMockRecorder
	isgomock struct{}
}

// MockUserStoreMockRecorder is the mock recorder for MockUserStore.
type MockUserStoreMockRecorder struct {
	mock *MockUserStore
}

// NewMockUserStore creates a new mock instance.
func NewMockUserStore(ctrl *gomock.Controller) *MockUserStore {
	mock := &MockUserStore{ctrl: ctrl}
	mock.recorder = &MockUserStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStore) EXPECT() *MockUserStoreMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUserStore) AddUser(ctx *gofr.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserStoreMockRecorder) AddUser(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserStore)(nil).AddUser), ctx, name)
}

// CheckIfRowsExists mocks base method.
func (m *MockUserStore) CheckIfRowsExists(ctx *gofr.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfRowsExists", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckIfRowsExists indicates an expected call of CheckIfRowsExists.
func (mr *MockUserStoreMockRecorder) CheckIfRowsExists(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfRowsExists", reflect.TypeOf((*MockUserStore)(nil).CheckIfRowsExists), ctx)
}

// CheckUserID mocks base method.
func (m *MockUserStore) CheckUserID(ctx *gofr.Context, id int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserID", ctx, id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckUserID indicates an expected call of CheckUserID.
func (mr *MockUserStoreMockRecorder) CheckUserID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserID", reflect.TypeOf((*MockUserStore)(nil).CheckUserID), ctx, id)
}

// GetUserByID mocks base method.
func (m *MockUserStore) GetUserByID(ctx *gofr.Context, id int) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserStoreMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserStore)(nil).GetUserByID), ctx, id)
}

// ViewUser mocks base method.
func (m *MockUserStore) ViewUser(ctx *gofr.Context) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewUser", ctx)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewUser indicates an expected call of ViewUser.
func (mr *MockUserStoreMockRecorder) ViewUser(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewUser", reflect.TypeOf((*MockUserStore)(nil).ViewUser), ctx)
}
